# Build worker image (VM template)
image:
  - Visual Studio 2019
  - macos
  - Ubuntu

# scripts that are called at very beginning, before repo cloning
init:
  - cmd: |
    date /T & time /T
    git config --global core.autocrlf input
    cmake --version
    
  - sh: |
    date
    cmake --version

branches:
  only:
  - master

platform:
  - x64

configuration:
  - Release
  - Debug

# Windows build
for:
-
  matrix:
    only:
      - image: Visual Studio 2019
      
  environment:
    MSBUILD_FLAGS: /verbosity:minimal /maxcpucount
    matrix:
      - generator: "Visual Studio 16 2019"
  
  install:
    - cmd: |
      cd %APPVEYOR_BUILD_FOLDER%
      dir
      cd app\server\native
      mklink /d ruby c:\Ruby26-x64
      set PATH=c:\Ruby26-x64\bin;C:\Program Files (x86)\WiX Toolset v3.11\bin;%PATH%
      gem install win32-process
      gem install rugged --version 0.27.1
      gem install aubio
      gem install fast_osc
      set QT_INSTALL_LOCATION=C:\Qt\5.14.0\msvc2017_64

  build_script:
    # generate build script
    - cmd: | 
      cd %APPVEYOR_BUILD_FOLDER%
      cd app\gui\qt
      win-prebuild.bat
      win-config.bat
      cd build
      cmake --build . --target ALL_BUILD --config %configuration% -- /nologo /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

  after_build:
    - cmd: |
      cd %APPVEYOR_BUILD_FOLDER%
      cd install\windows
      IF "%configuration%"=="Release" install.bat
    #- IF "%configuration%"=="Release" appveyor PushArtifact wix\sonic-pi.msi
   
# Ubuntu Linux build
for:
-
  matrix:
    only:
      - image: Ubuntu
  
  install:
    - sh: |
        cd "$APPVEYOR_BUILD_FOLDER"
        ls -lA
        sudo apt-get install g++ ruby ruby-dev pkg-config git build-essential libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libicu-dev libreadline6-dev libfftw3-dev libxt-dev libudev-dev cmake libboost-dev libqt5scintilla2-dev libqt5svg5-dev qt5-qmake qt5-default qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5webkit5-dev qtpositioning5-dev libqt5sensors5-dev libqt5opengl5-dev qtmultimedia5-dev libffi-dev curl erlang-base
        gem install bundler

  build_script:
    # generate build script
    - sh: |
      cd "$APPVEYOR_BUILD_FOLDER"
      cd app/gui/qt
      cd app/gui/qt
      ./unix-prebuild.sh
      ./unix-config.sh
      cd build
      cmake --build . --target ALL_BUILD
      
# macOS build
for:
-
  matrix:
    only:
      - image: macos
  
  install:
    - sh: |
        cd "$APPVEYOR_BUILD_FOLDER"
        ls -lA
        brew install cmake erlang qt
        gem install bundler

  build_script:
    # generate build script
    - sh: |
      cd "$APPVEYOR_BUILD_FOLDER"
      cd app/server/ruby/bin
      ./compile-extensions.rb
      cd app/gui/qt
      ./unix-prebuild.sh
      ./unix-config.sh
      cd build
      cmake --build . --target ALL_BUILD 

matrix:
  fast_finish: true


